import safeGet from 'just-safe-get'
import helper from './helper'

$ const soldModule = state.model.data;
$ {
    const timeout =
        (safeGet(input, "model.data.modules.warmup") && 60000) ||
        safeGet(input, "modules.configModule.awaitTimeout");
}
$ const configModule = safeGet(soldModule, "modules.configModule");
$ const i18nModule = safeGet(state, "model.data.modules.i18nModule");
$ const errorMessage = safeGet(i18nModule, "commonServerError");
$ const busyLabel = safeGet(i18nModule, "busyLabel");
$ const model = helper.createErrorModel(errorMessage);
<app-shell model=soldModule i18n=i18nModule>
    <div.sold-page__wrapper id="meb-items-cnt" key="soldContainer">
        <me-spinner label=busyLabel key="spinner"/>
        <!-- start welcome screen -->
        <await-ebay(model from soldModule.modules.welcomeScreenModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ soldModule.modules.welcomeScreenModule = model;
            <me-welcome-screen model=model/>
        </await-ebay>
        <!-- end welcome screen -->
        <await-ebay(model from soldModule.modules.MadronaAdsModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ soldModule.modules.MadronaAdsModule = model;
            <me-madrona-notice model=model class="madrona-sold-banner"/>
        </await-ebay>
        <await-ebay(model from soldModule.modules.sellerMessageModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ soldModule.modules.sellerMessageModule = model;
            <me-banner model=model key="sold-banner"/>
        </await-ebay>
        <!-- start title, sort, filter -->
        <await-ebay(model from soldModule.modules.soldRefinementModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ soldModule.modules.soldRefinementModule = model;
            <sold-refinement
                model=model
                multi-item-selected=(state.selectedIdList && state.selectedIdList.length > 1)
                enableMultiSelect=state.enableMultiSelect
                enableDeleteButton=state.enableDeleteButton
                on-handleMultiSelectClick("handleMultiSelectClick")
                on-soldPageUpdate("updateSoldContainer")
                on-delete-items("deleteItems")
                is-edit-mode=state.isEditMode
                on-toggleEditMode("toggleEditMode")
                key="sold-refinement"/>
        </await-ebay>
        <!-- end title, sort, filter -->
        <!-- start empty screen -->
        <await-ebay(model from soldModule.modules.emptyStateModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ soldModule.modules.emptyStateModule = model;
            <me-empty model=model key="sold-empty"/>
        </await-ebay>
        <!-- end empty screnn -->
        <!-- start error screen -->
        <await-ebay(model from soldModule.modules.errorStateModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ soldModule.modules.errorStateModule = model;
            <me-error model=model key="sold-error"/>
        </await-ebay>
        <!-- end error screen -->
        <!-- start items list -->
        <await-ebay(model from soldModule.modules.soldListingsModule) timeout=timeout>
            <await-error-ebay/>
            <await-timeout-ebay>
                <me-error model=model key="sold-error"/>
            </await-timeout-ebay>
            $ soldModule.modules.soldListingsModule = model;
            $ component.orderIdCollection = (
                safeGet(model, "lineItems") || []
            ).map(li => li.orderId);
            <sold-listing
                model=model
                i18nModule=i18nModule
                configModule=configModule
                selectedIdList=state.selectedIdList
                on-soldPageUpdate("updateSoldContainer")
                on-show-loader("showSpinner")
                is-edit-mode=state.isEditMode
                on-checkbox-change("handleSingleCheckboxClick")
                key="sold-listing"/>
        </await-ebay>
        <!-- end items list-->
        <!-- A promise that resolves as 'true' when all the other promise error out (a.k.a) backend service is down.
        Not using the module error as I would have to create the same module to send it and can't assign the content,
        as we are using state so it will render error module twice -->
        <!-- TODO can be reduced by asking backend to send one key value pair instead of a textspan so we can use error module -->
        <await-ebay(allErrored from soldModule.modules.allPromisesRejected)>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ soldModule.modules.allPromisesRejected = allErrored;
            <if(allErrored && allErrored.showNodeError)>
                <me-error model=model key="sold-error"/>
            </if>
        </await-ebay>
    </div>
</app-shell>
