import canvasUtil from '../../../../../../utils/helpers/create-high-dpi-canvas'
import domUtils from '../../../../../../utils/helpers/elementVisibleInViewport'
import { debounce } from '../../../../../../utils/helpers/debounce'

class straightLine {
    onMount() {
        this.devicePixelRatio = window.devicePixelRatio || 1;
        const endValue = Number(this.input.endValue);
        const startValue = Number(this.input.startValue);

        const lineBarWidth = document.querySelector('.line-bar-wrapper').offsetWidth;
        this.getEl("line-canvas").setAttribute('width',lineBarWidth);
        this.endLength = lineBarWidth && Number((lineBarWidth * startValue) / endValue);
        if (this.endLength > 0) {
            this.beginTime = 0.0;
            this._initLine();
        }
    }

    _initLine() {
        const el = this.getEl("line-canvas");
        this.lineCanvas = canvasUtil.createHiDPICanvas(
            el,
            this.devicePixelRatio
        );
        this.context = this.lineCanvas.getContext("2d");
        this.context.beginPath();
        this.context.moveTo(0, 8);
        this.context.lineCap = "round";
        this.context.strokeStyle = this.input.color;
        this.context.lineWidth = this.input.borderWidth;
        this.context.lineTo(this.endLength, 8);
        this.context.stroke();
    }
}

style.less {
    .line-bar-wrapper {
        position: relative;
        min-height: 25px;
        width: 100%;
    }

    .faux-line {
        position: absolute;
        border-top: solid @color-grey2;
        transform: translate(0, 20%);
    }

    .line-bar {
        position: absolute;
        pointer-events: none;
    }
}

<div class="line-bar-wrapper">
    $ {
        const canvasHeight = Number(input.height);
        const canvasWidth = Number(input.width);
    }
    <div
        class="faux-line"
        style=`border-width: ${input.borderWidth}px; width: 100%; height: ${input.height}px`/>
    <canvas
        key="line-canvas"
        class="line-bar"
        width=`100%`
        height=`${canvasHeight}`/>
</div>
