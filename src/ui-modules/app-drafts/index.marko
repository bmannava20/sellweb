import safeGet from 'just-safe-get'
import helper from './helper'
import constants from '../../utils/helpers/constants'

$ const draftsModule = state.model.data;
$ const configModule = safeGet(draftsModule, "modules.configModule");
$ const i18nModule = safeGet(state, "model.data.modules.i18nModule");
$ const errorMessage = safeGet(i18nModule, "commonServerError");
$ const busyLabel = safeGet(i18nModule, "busyLabel");
$ {
    const timeout =
        (safeGet(input, "model.data.modules.warmup") && 60000) ||
        safeGet(input, "modules.configModule.awaitTimeout");
}
<app-shell model=draftsModule>
    <div.drafts-page__wrapper id="meb-items-cnt">
        <me-spinner label=busyLabel key="spinner"/>
        <!-- start welcome screen -->
        <await-ebay(model from draftsModule.modules.welcomeScreenModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ draftsModule.modules.welcomeScreenModule = model;
            <me-welcome-screen model=model/>
        </await-ebay>
        <!-- end welcome screen -->
        <await-ebay(model from draftsModule.modules.draftRefinementModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ draftsModule.modules.draftRefinementModule = model;
            <if(model && model.moduleTitle)>
                <me-summary>
                    <@pageTitle>
                        <me-textual-display model=model.moduleTitle.textSpans/>
                    </@pageTitle>
                    <@edit>
                        <if(
                            safeGet(
                                draftsModule,
                                "modules.draftRefinementModule.bulkDeleteCancel"
                            )
                        )>
                            $ const bulkDeleteModel = {
                                editText: safeGet(
                                    draftsModule,
                                    "modules.draftRefinementModule.edit.textSpans"
                                ),
                                cancelText: safeGet(
                                    draftsModule,
                                    "modules.draftRefinementModule.bulkDeleteCancel.textSpans"
                                )
                            };
                            <me-toggle-edit-mode
                                model=bulkDeleteModel
                                is-edit-mode=state.isEditMode
                                on-toggleEditMode("toggleEditMode")/>
                        </if>
                    </@edit>
                </me-summary>
            </if>
        </await-ebay>
        <await-ebay(model from draftsModule.modules.resellBulkData) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ draftsModule.modules.resellBulkData = model;
            <if(model)>
                $ {
                    const generateDraftsApi = constants.SPA_COMMAND.DRAFTS.DRAFTS_AJAX_URL.BULK_CREATE_API;
                    const searchLotsApi = constants.SPA_COMMAND.DRAFTS.DRAFTS_AJAX_URL.BULK_SEARCH_API;
                    const dialogClose = safeGet(i18nModule, "dialogClose");
                    const loadingDialog = safeGet(i18nModule, "loadingDialog");
                    const systemErrorMessage = safeGet(i18nModule, "systemErrorMessage");
                }
                <resell-bulk-drafts
                    key="resell"
                    open
                    BulkToolModalModule=model.modules.BulkToolModalModule
                    BulkToolProcessingMessageModule=model.modules.BulkToolProcessingMessageModule
                    csrfToken=draftsModule.modules.csrfTokenModule
                    a11y-close-text=dialogClose
                    a11y-loading-text=loadingDialog
                    systemErrorMessage=systemErrorMessage
                    generateDraftsApi=generateDraftsApi
                    getOrderDetailsApi=searchLotsApi
                    on-done("refreshDrafts") />
            </if>
        </await-ebay>
        <!-- start empty screen -->
        <await-ebay(model from draftsModule.modules.emptyStateModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ draftsModule.modules.emptyStateModule = model;
            <me-empty model=model key="draft-empty"/>
        </await-ebay>
        <!-- end empty screnn -->
        <!-- start error screen -->
        <await-ebay(model from draftsModule.modules.errorStateModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ draftsModule.modules.errorStateModule = model;
            <me-error model=model key="draft-error"/>
        </await-ebay>
        <!-- end error screnn -->
        <!-- start draft listings -->
        <await-ebay(model from draftsModule.modules.draftListingsModule) timeout=timeout>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ draftsModule.modules.draftListingsModule = model;
            <draft-listing
                model=model
                key="draft-listing"
                on-delete-items("deleteItems")
                on-draftPageUpdate("updateDraftContainer")
                is-edit-mode=state.isEditMode/>
        </await-ebay>
        <!-- end draft listings -->
        <await-ebay(allErrored from draftsModule.modules.allPromisesRejected)>
            <await-timeout-ebay/>
            <await-error-ebay/>
            $ draftsModule.modules.allPromisesRejected = allErrored;
            <if(allErrored && allErrored.showNodeError === true)>
                $ const model = helper.createErrorModel(errorMessage);
                <me-error model=model key="draft-error"/>
            </if>
        </await-ebay>
    </div>
</app-shell>
